/**
 * @file controller.h
 * @author Teruru-52
 */

#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include "hardware/speaker.h"
#include "hardware/ir_sensor.h"
#include "controller/odometry.h"
#include "controller/pid_controller.h"
#include "controller/tracker.h"
#include "controller/identification.h"
#include "Agent.h"

#define ENABLE_SLALOM 1
#define ENABLE_SLALOM_CORRECTION 1
#define ENABLE_LOG 1
#define BUFFER_SIZE 10
#define CNT_LOG 2
#define CNT_BACK 4
#define CNT_BLIND_ALLAY 2

using SlalomType = trajectory::Slalom::SlalomType;
using AccType = trajectory::Acceleration::AccType;
using namespace hardware;

namespace undercarriage
{
    class Controller
    {
    public:
        Controller(undercarriage::Odometory *odom,
                   PID_Instances *pid,
                   undercarriage::TrackerBase *tracker,
                   trajectory::Slalom *slalom,
                   trajectory::Acceleration *acc,
                   hardware::IR_Param *ir_param,
                   trajectory::Velocity *velocity);

        typedef enum
        {
            forward,
            acc_curve,
            turn,
            pivot_turn_right_90,
            pivot_turn_left_90,
            pivot_turn_180,
            front_wall_correction,
            back,
            m_iden,
            step_iden,
            party_trick,
            stop,
            wait
        } CtrlMode;

        void InitializeOdometory() { odom->Initialize(); };
        void StartDMA() { motor.StartDMA(); };
        void InitializeMotor() { motor.CalcOffset(); };
        void BatteryCheck() { motor.BatteryCheck(); };
        int16_t GetPulseL() { return odom->GetPulseL(); };
        int16_t GetPulseR() { return odom->GetPulseR(); };

        void UpdateOdometory();
        // void UpdateIMU() { odom->UpdateIMU(); };
        void SetIRdata(const IR_Value &ir_value);
        void SetTrajectoryMode(int trj_mode = 1);
        // void SetBase() { theta_base = cur_pos.th; };
        bool ErrorFlag();

        void SetM_Iden();
        void SetStep_Iden();
        void SetPartyTrick();
        void PivotTurn(int angle);
        void Turn(const SlalomType &slalom_type);
        void Acceleration(const AccType &acc_type, uint8_t num_square = 1);
        void FrontWallCorrection();
        void Back();
        void Wait_ms();

        void M_Iden();
        void Step_Iden();
        void PartyTrick();
        void SideWallCorrection();
        void PivotTurn();
        void CalcSlalomInput();
        float GetFrontWallPos(float ir_fmean);
        void Turn();
        void Acceleration();
        void Back(int time);
        void Wait_ms(int time);
        void FrontWallCorrection(const IR_Value &ir_value);
        void BlindAlley();
        void StartMove();
        void Brake();
        void InputVelocity(float input_v, float input_w);

        void ResetCtrl();
        bool GetCtrlFlag() { return flag_ctrl; };
        bool GetMazeFlashFlag() { return flag_maze_flash; };
        void ResetWallFlag() { flag_wall = false; };
        void ResetMazeLoadFlag() { flag_maze_flash = false; };

        bool wallDataReady() { return flag_wall; };
        void updateWallData() { ir_wall_value = ir_value_; };
        IR_Value GetIRWall() { return ir_wall_value; };
        Direction getWallData();
        void UpdatePos(const Direction &dir);
        void UpdateDir(const Direction &dir) { robot_dir = dir; };
        IndexVec getRobotPosition() { return robot_position; };

        void robotMove();
        void DirMove(const Direction &dir);
        void OpMove(const Operation &op);
        void CalcOpMovedState(const OperationList &runSequence);

        void Logger();
        void LoggerWall();
        void OutputLog();
        void OutputSlalomLog();
        void OutputPivotTurnLog();
        void OutputTranslationLog();
        void OutputMIdenLog() { iden_m.OutputLog(); };
        void OutputStepIdenLog() { iden_step.OutputLog(); };
        void MotorTest(float v_left, float v_right);

    private:
        std::unique_ptr<undercarriage::Odometory> odom;
        hardware::Motor motor;
        std::unique_ptr<PID_Instances> pid;
        std::unique_ptr<undercarriage::TrackerBase> tracker;
        std::unique_ptr<trajectory::Slalom> slalom;
        std::unique_ptr<trajectory::Acceleration> acc;
        trajectory::PivotTurn180 pivot_turn180;
        trajectory::PivotTurn90 pivot_turn90;
        CtrlMode mode_ctrl;
        std::unique_ptr<hardware::IR_Param> ir_param;
        std::unique_ptr<trajectory::Velocity> velocity;
        undercarriage::M_Identification iden_m;
        undercarriage::Step_Identification iden_step;

        float v_left;
        float v_right;
        float u_w;
        float u_v;

        float ref_v;
        float ref_w;
        float ref_dw;
        int ref_size;

        float theta_base = 0.0; // theta_global_ref
        float theta_global = 0.0;
        float theta_error = 0.0;
        int angle_turn;
        float ref_theta = 0;
        float x_diff = 0;
        float length;
        SlalomType slalom_type_;
        ctrl::Pose cur_pos{0, 0, 0};
        ctrl::Pose cur_vel{0, 0, 0};
        ctrl::Pose ref_pos{0, 0, 0}; // absolute coordinates
        ctrl::Pose ref_vel{0, 0, 0}; // robot coordinates
        ctrl::Pose ref_vel_ctrl{0, 0, 0};
        ctrl::Pose ref_acc{0, 0, 0}; // robot coordinates
        float acc_x;
        const float acc_x_err = 30.0 * 1e+3; // error threshold

        const float Tp1_w = 31.83;
        const float Kp_w = 144.2 * 1e+3;
        const float Tp1_v = 0.032;
        // const float Kp_v = 0.784493 * 1e+3;
        const float Kp_v = 0.65 * 1e+3;

        hardware::IR_Value ir_value_;
        hardware::IR_Value ir_wall_value;
        bool flag_read_side_wall = false;
        typedef std::pair<uint32_t, float> xy_pair;
        // const std::vector<xy_pair> ir_table = {{2200, -48.9276}}; // dammy
        // home
        // const std::vector<xy_pair> ir_table = {{2370, -34.5532}, {2371, -33.9652}, {2372, -33.3845}, {2373, -32.8108}, {2374, -32.2440}, {2375, -31.6840}, {2376, -31.1305}, {2377, -30.5834}, {2378, -30.0426}, {2379, -29.5079}, {2380, -28.9792}, {2381, -28.4563}, {2382, -27.9392}, {2383, -27.4277}, {2384, -26.9217}, {2385, -26.4210}, {2386, -25.9256}, {2387, -25.4353}, {2388, -24.9501}, {2389, -24.4698}, {2390, -23.9943}, {2391, -23.5236}, {2392, -23.0576}, {2393, -22.5960}, {2394, -22.1390}, {2395, -21.6863}, {2396, -21.2380}, {2397, -20.7938}, {2398, -20.3538}, {2399, -19.9179}, {2400, -19.4859}, {2401, -19.0579}, {2402, -18.6337}, {2403, -18.2133}, {2404, -17.7966}, {2405, -17.3835}, {2406, -16.9741}, {2407, -16.5681}, {2408, -16.1656}, {2409, -15.7665}, {2410, -15.3708}, {2411, -14.9783}, {2412, -14.5891}, {2413, -14.2031}, {2414, -13.8202}, {2415, -13.4403}, {2416, -13.0636}, {2417, -12.6897}, {2418, -12.3189}, {2419, -11.9509}, {2420, -11.5858}, {2421, -11.2234}, {2422, -10.8638}, {2423, -10.5070}, {2424, -10.1528}, {2425, -9.8013}, {2426, -9.4523}, {2427, -9.1059}, {2428, -8.7621}, {2429, -8.4207}, {2430, -8.0818}, {2431, -7.7453}, {2432, -7.4112}, {2433, -7.0794}, {2434, -6.7499}, {2435, -6.4227}, {2436, -6.0978}, {2437, -5.7751}, {2438, -5.4546}, {2439, -5.1362}, {2440, -4.8200}, {2441, -4.5059}, {2442, -4.1939}, {2443, -3.8839}, {2444, -3.5759}, {2445, -3.2699}, {2446, -2.9659}, {2447, -2.6639}, {2448, -2.3637}, {2449, -2.0655}, {2450, -1.7691}, {2451, -1.4746}, {2452, -1.1819}, {2453, -0.8910}, {2454, -0.6019}, {2455, -0.3145}, {2456, -0.0289}, {2457, 0.2550}, {2458, 0.5372}, {2459, 0.8177}, {2460, 1.0965}, {2461, 1.3738}, {2462, 1.6494}, {2463, 1.9234}, {2464, 2.1958}, {2465, 2.4667}, {2466, 2.7360}, {2467, 3.0038}, {2468, 3.2701}, {2469, 3.5348}, {2470, 3.7982}, {2471, 4.0600}, {2472, 4.3204}, {2473, 4.5794}, {2474, 4.8369}, {2475, 5.0931}, {2476, 5.3479}, {2477, 5.6013}, {2478, 5.8534}, {2479, 6.1041}, {2480, 6.3535}, {2481, 6.6016}, {2482, 6.8484}, {2483, 7.0939}, {2484, 7.3381}, {2485, 7.5811}, {2486, 7.8229}, {2487, 8.0634}, {2488, 8.3026}, {2489, 8.5407}, {2490, 8.7776}, {2491, 9.0133}, {2492, 9.2478}, {2493, 9.4812}, {2494, 9.7134}, {2495, 9.9445}, {2496, 10.1745}, {2497, 10.4033}, {2498, 10.6311}, {2499, 10.8577}, {2500, 11.0833}, {2501, 11.3078}, {2502, 11.5312}, {2503, 11.7536}, {2504, 11.9749}, {2505, 12.1953}, {2506, 12.4145}, {2507, 12.6328}, {2508, 12.8501}, {2509, 13.0663}, {2510, 13.2816}, {2511, 13.4959}, {2512, 13.7093}, {2513, 13.9216}, {2514, 14.1331}, {2515, 14.3435}, {2516, 14.5531}, {2517, 14.7617}, {2518, 14.9694}, {2519, 15.1762}, {2520, 15.3821}, {2521, 15.5871}, {2522, 15.7912}, {2523, 15.9944}, {2524, 16.1968}, {2525, 16.3983}, {2526, 16.5989}, {2527, 16.7987}, {2528, 16.9977}, {2529, 17.1958}, {2530, 17.3931}, {2531, 17.5896}, {2532, 17.7852}, {2533, 17.9801}, {2534, 18.1741}, {2535, 18.3674}, {2536, 18.5598}, {2537, 18.7515}, {2538, 18.9424}, {2539, 19.1325}, {2540, 19.3219}, {2541, 19.5105}, {2542, 19.6984}, {2543, 19.8855}, {2544, 20.0719}, {2545, 20.2576}, {2546, 20.4425}, {2547, 20.6267}, {2548, 20.8102}, {2549, 20.9929}, {2550, 21.1750}, {2551, 21.3564}, {2552, 21.5371}, {2553, 21.7171}, {2554, 21.8964}, {2555, 22.0750}, {2556, 22.2529}, {2557, 22.4302}, {2558, 22.6068}, {2559, 22.7828}, {2560, 22.9581}, {2561, 23.1328}, {2562, 23.3068}, {2563, 23.4802}, {2564, 23.6529}, {2565, 23.8250}, {2566, 23.9965}, {2567, 24.1674}, {2568, 24.3376}, {2569, 24.5073}, {2570, 24.6763}, {2571, 24.8447}, {2572, 25.0126}, {2573, 25.1798}, {2574, 25.3465}, {2575, 25.5125}, {2576, 25.6780}, {2577, 25.8429}, {2578, 26.0072}, {2579, 26.1710}, {2580, 26.3342}, {2581, 26.4968}, {2582, 26.6589}, {2583, 26.8204}, {2584, 26.9814}, {2585, 27.1418}, {2586, 27.3016}, {2587, 27.4610}, {2588, 27.6198}, {2589, 27.7780}, {2590, 27.9358}, {2591, 28.0930}, {2592, 28.2497}, {2593, 28.4059}, {2594, 28.5615}, {2595, 28.7167}, {2596, 28.8713}, {2597, 29.0254}, {2598, 29.1791}, {2599, 29.3322}, {2600, 29.4848}};
        // science tokyo
        // const std::vector<xy_pair> ir_table = {{2370, -26.0929}, {2371, -25.6562}, {2372, -25.2227}, {2373, -24.7924}, {2374, -24.3653}, {2375, -23.9413}, {2376, -23.5204}, {2377, -23.1026}, {2378, -22.6877}, {2379, -22.2758}, {2380, -21.8667}, {2381, -21.4606}, {2382, -21.0573}, {2383, -20.6567}, {2384, -20.2589}, {2385, -19.8639}, {2386, -19.4715}, {2387, -19.0817}, {2388, -18.6945}, {2389, -18.3099}, {2390, -17.9279}, {2391, -17.5483}, {2392, -17.1712}, {2393, -16.7966}, {2394, -16.4243}, {2395, -16.0545}, {2396, -15.6869}, {2397, -15.3217}, {2398, -14.9588}, {2399, -14.5981}, {2400, -14.2397}, {2401, -13.8835}, {2402, -13.5294}, {2403, -13.1775}, {2404, -12.8277}, {2405, -12.4800}, {2406, -12.1344}, {2407, -11.7909}, {2408, -11.4493}, {2409, -11.1098}, {2410, -10.7722}, {2411, -10.4366}, {2412, -10.1029}, {2413, -9.7712}, {2414, -9.4413}, {2415, -9.1133}, {2416, -8.7871}, {2417, -8.4628}, {2418, -8.1402}, {2419, -7.8195}, {2420, -7.5005}, {2421, -7.1833}, {2422, -6.8678}, {2423, -6.5540}, {2424, -6.2418}, {2425, -5.9314}, {2426, -5.6226}, {2427, -5.3155}, {2428, -5.0099}, {2429, -4.7060}, {2430, -4.4036}, {2431, -4.1029}, {2432, -3.8036}, {2433, -3.5060}, {2434, -3.2098}, {2435, -2.9151}, {2436, -2.6220}, {2437, -2.3303}, {2438, -2.0400}, {2439, -1.7512}, {2440, -1.4639}, {2441, -1.1779}, {2442, -0.8934}, {2443, -0.6102}, {2444, -0.3285}, {2445, -0.0481}, {2446, 0.2310}, {2447, 0.5087}, {2448, 0.7851}, {2449, 1.0602}, {2450, 1.3340}, {2451, 1.6065}, {2452, 1.8777}, {2453, 2.1477}, {2454, 2.4164}, {2455, 2.6838}, {2456, 2.9501}, {2457, 3.2151}, {2458, 3.4789}, {2459, 3.7415}, {2460, 4.0030}, {2461, 4.2632}, {2462, 4.5223}, {2463, 4.7803}, {2464, 5.0371}, {2465, 5.2928}, {2466, 5.5473}, {2467, 5.8007}, {2468, 6.0531}, {2469, 6.3043}, {2470, 6.5545}, {2471, 6.8036}, {2472, 7.0516}, {2473, 7.2985}, {2474, 7.5444}, {2475, 7.7893}, {2476, 8.0331}, {2477, 8.2760}, {2478, 8.5178}, {2479, 8.7586}, {2480, 8.9984}, {2481, 9.2372}, {2482, 9.4750}, {2483, 9.7119}, {2484, 9.9478}, {2485, 10.1827}, {2486, 10.4167}, {2487, 10.6498}, {2488, 10.8819}, {2489, 11.1131}, {2490, 11.3434}, {2491, 11.5728}, {2492, 11.8012}, {2493, 12.0288}, {2494, 12.2555}, {2495, 12.4813}, {2496, 12.7062}, {2497, 12.9302}, {2498, 13.1534}, {2499, 13.3758}, {2500, 13.5972}, {2501, 13.8179}, {2502, 14.0377}, {2503, 14.2566}, {2504, 14.4748}, {2505, 14.6921}, {2506, 14.9086}, {2507, 15.1243}, {2508, 15.3393}, {2509, 15.5534}, {2510, 15.7667}, {2511, 15.9792}, {2512, 16.1910}, {2513, 16.4020}, {2514, 16.6123}, {2515, 16.8217}, {2516, 17.0304}, {2517, 17.2384}, {2518, 17.4456}, {2519, 17.6521}, {2520, 17.8579}, {2521, 18.0629}, {2522, 18.2672}, {2523, 18.4708}, {2524, 18.6737}, {2525, 18.8759}, {2526, 19.0773}, {2527, 19.2781}, {2528, 19.4782}, {2529, 19.6776}, {2530, 19.8763}, {2531, 20.0743}, {2532, 20.2716}, {2533, 20.4683}, {2534, 20.6643}, {2535, 20.8597}, {2536, 21.0544}, {2537, 21.2484}, {2538, 21.4418}, {2539, 21.6346}, {2540, 21.8267}, {2541, 22.0182}, {2542, 22.2090}, {2543, 22.3993}, {2544, 22.5889}, {2545, 22.7779}, {2546, 22.9662}, {2547, 23.1540}, {2548, 23.3411}, {2549, 23.5277}, {2550, 23.7137}, {2551, 23.8990}, {2552, 24.0838}, {2553, 24.2680}, {2554, 24.4516}, {2555, 24.6346}, {2556, 24.8170}, {2557, 24.9989}, {2558, 25.1802}, {2559, 25.3609}, {2560, 25.5411}, {2561, 25.7207}, {2562, 25.8998}, {2563, 26.0783}, {2564, 26.2563}, {2565, 26.4337}, {2566, 26.6105}, {2567, 26.7869}, {2568, 26.9627}, {2569, 27.1380}, {2570, 27.3127}, {2571, 27.4869}, {2572, 27.6606}, {2573, 27.8338}, {2574, 28.0065}, {2575, 28.1786}, {2576, 28.3502}, {2577, 28.5214}, {2578, 28.6920}, {2579, 28.8621}, {2580, 29.0318}, {2581, 29.2009}, {2582, 29.3695}, {2583, 29.5377}, {2584, 29.7054}, {2585, 29.8725}, {2586, 30.0392}, {2587, 30.2055}, {2588, 30.3712}, {2589, 30.5365}, {2590, 30.7013}, {2591, 30.8656}, {2592, 31.0295}, {2593, 31.1929}, {2594, 31.3559}, {2595, 31.5184}, {2596, 31.6804}, {2597, 31.8420}, {2598, 32.0031}, {2599, 32.1638}, {2600, 32.3241}};
        // const std::vector<xy_pair> ir_table = {{2370, -42.8185}, {2371, -42.1591}, {2372, -41.5072}, {2373, -40.8623}, {2374, -40.2245}, {2375, -39.5935}, {2376, -38.9692}, {2377, -38.3515}, {2378, -37.7403}, {2379, -37.1353}, {2380, -36.5365}, {2381, -35.9437}, {2382, -35.3569}, {2383, -34.7758}, {2384, -34.2005}, {2385, -33.6308}, {2386, -33.0665}, {2387, -32.5076}, {2388, -31.9539}, {2389, -31.4055}, {2390, -30.8621}, {2391, -30.3237}, {2392, -29.7901}, {2393, -29.2614}, {2394, -28.7374}, {2395, -28.2181}, {2396, -27.7033}, {2397, -27.1929}, {2398, -26.6870}, {2399, -26.1854}, {2400, -25.6880}, {2401, -25.1948}, {2402, -24.7057}, {2403, -24.2207}, {2404, -23.7396}, {2405, -23.2625}, {2406, -22.7892}, {2407, -22.3196}, {2408, -21.8538}, {2409, -21.3917}, {2410, -20.9332}, {2411, -20.4782}, {2412, -20.0267}, {2413, -19.5787}, {2414, -19.1340}, {2415, -18.6928}, {2416, -18.2547}, {2417, -17.8200}, {2418, -17.3884}, {2419, -16.9600}, {2420, -16.5347}, {2421, -16.1124}, {2422, -15.6932}, {2423, -15.2769}, {2424, -14.8636}, {2425, -14.4531}, {2426, -14.0455}, {2427, -13.6407}, {2428, -13.2387}, {2429, -12.8394}, {2430, -12.4428}, {2431, -12.0489}, {2432, -11.6576}, {2433, -11.2689}, {2434, -10.8827}, {2435, -10.4991}, {2436, -10.1179}, {2437, -9.7393}, {2438, -9.3630}, {2439, -8.9891}, {2440, -8.6176}, {2441, -8.2485}, {2442, -7.8816}, {2443, -7.5170}, {2444, -7.1547}, {2445, -6.7946}, {2446, -6.4367}, {2447, -6.0809}, {2448, -5.7273}, {2449, -5.3759}, {2450, -5.0265}, {2451, -4.6791}, {2452, -4.3338}, {2453, -3.9906}, {2454, -3.6493}, {2455, -3.3100}, {2456, -2.9727}, {2457, -2.6372}, {2458, -2.3037}, {2459, -1.9721}, {2460, -1.6423}, {2461, -1.3144}, {2462, -0.9883}, {2463, -0.6640}, {2464, -0.3414}, {2465, -0.0207}, {2466, 0.2984}, {2467, 0.6157}, {2468, 0.9312}, {2469, 1.2452}, {2470, 1.5574}, {2471, 1.8680}, {2472, 2.1769}, {2473, 2.4843}, {2474, 2.7900}, {2475, 3.0941}, {2476, 3.3967}, {2477, 3.6978}, {2478, 3.9973}, {2479, 4.2952}, {2480, 4.5917}, {2481, 4.8867}, {2482, 5.1802}, {2483, 5.4722}, {2484, 5.7628}, {2485, 6.0520}, {2486, 6.3398}, {2487, 6.6261}, {2488, 6.9111}, {2489, 7.1947}, {2490, 7.4769}, {2491, 7.7578}, {2492, 8.0373}, {2493, 8.3155}, {2494, 8.5924}, {2495, 8.8680}, {2496, 9.1423}, {2497, 9.4154}, {2498, 9.6871}, {2499, 9.9577}, {2500, 10.2269}, {2501, 10.4950}, {2502, 10.7618}, {2503, 11.0274}, {2504, 11.2919}, {2505, 11.5551}, {2506, 11.8172}, {2507, 12.0781}, {2508, 12.3378}, {2509, 12.5965}, {2510, 12.8539}, {2511, 13.1103}, {2512, 13.3655}, {2513, 13.6196}, {2514, 13.8727}, {2515, 14.1246}, {2516, 14.3755}, {2517, 14.6253}, {2518, 14.8741}, {2519, 15.1218}, {2520, 15.3684}, {2521, 15.6140}, {2522, 15.8586}, {2523, 16.1022}, {2524, 16.3448}, {2525, 16.5864}, {2526, 16.8270}, {2527, 17.0666}, {2528, 17.3052}, {2529, 17.5429}, {2530, 17.7796}, {2531, 18.0154}, {2532, 18.2502}, {2533, 18.4841}, {2534, 18.7171}, {2535, 18.9491}, {2536, 19.1802}, {2537, 19.4104}, {2538, 19.6398}, {2539, 19.8682}, {2540, 20.0957}, {2541, 20.3224}, {2542, 20.5482}, {2543, 20.7731}, {2544, 20.9972}, {2545, 21.2204}, {2546, 21.4428}, {2547, 21.6643}, {2548, 21.8850}, {2549, 22.1049}, {2550, 22.3239}, {2551, 22.5422}, {2552, 22.7596}, {2553, 22.9762}, {2554, 23.1920}, {2555, 23.4071}, {2556, 23.6213}, {2557, 23.8348}, {2558, 24.0475}, {2559, 24.2595}, {2560, 24.4706}, {2561, 24.6811}, {2562, 24.8907}, {2563, 25.0997}, {2564, 25.3078}, {2565, 25.5153}, {2566, 25.7220}, {2567, 25.9280}, {2568, 26.1333}, {2569, 26.3378}, {2570, 26.5417}, {2571, 26.7448}, {2572, 26.9472}, {2573, 27.1490}, {2574, 27.3500}, {2575, 27.5504}, {2576, 27.7501}, {2577, 27.9491}, {2578, 28.1474}, {2579, 28.3451}, {2580, 28.5421}, {2581, 28.7384}, {2582, 28.9341}, {2583, 29.1292}, {2584, 29.3236}, {2585, 29.5173}, {2586, 29.7104}, {2587, 29.9029}, {2588, 30.0948}, {2589, 30.2860}, {2590, 30.4766}, {2591, 30.6666}, {2592, 30.8560}, {2593, 31.0448}, {2594, 31.2329}, {2595, 31.4205}, {2596, 31.6075}, {2597, 31.7939}, {2598, 31.9796}, {2599, 32.1648}, {2600, 32.3495}};
        // 12/20
        const std::vector<xy_pair> ir_table = {{2400, -32.7445}, {2401, -32.2105}, {2402, -31.6816}, {2403, -31.1577}, {2404, -30.6387}, {2405, -30.1246}, {2406, -29.6152}, {2407, -29.1104}, {2408, -28.6103}, {2409, -28.1146}, {2410, -27.6233}, {2411, -27.1364}, {2412, -26.6537}, {2413, -26.1752}, {2414, -25.7008}, {2415, -25.2304}, {2416, -24.7640}, {2417, -24.3015}, {2418, -23.8429}, {2419, -23.3880}, {2420, -22.9369}, {2421, -22.4894}, {2422, -22.0455}, {2423, -21.6051}, {2424, -21.1682}, {2425, -20.7348}, {2426, -20.3047}, {2427, -19.8780}, {2428, -19.4545}, {2429, -19.0342}, {2430, -18.6171}, {2431, -18.2032}, {2432, -17.7923}, {2433, -17.3844}, {2434, -16.9796}, {2435, -16.5777}, {2436, -16.1787}, {2437, -15.7825}, {2438, -15.3892}, {2439, -14.9986}, {2440, -14.6108}, {2441, -14.2257}, {2442, -13.8433}, {2443, -13.4635}, {2444, -13.0863}, {2445, -12.7116}, {2446, -12.3395}, {2447, -11.9699}, {2448, -11.6027}, {2449, -11.2379}, {2450, -10.8756}, {2451, -10.5156}, {2452, -10.1579}, {2453, -9.8025}, {2454, -9.4494}, {2455, -9.0986}, {2456, -8.7499}, {2457, -8.4035}, {2458, -8.0592}, {2459, -7.7170}, {2460, -7.3769}, {2461, -7.0390}, {2462, -6.7031}, {2463, -6.3692}, {2464, -6.0373}, {2465, -5.7074}, {2466, -5.3794}, {2467, -5.0534}, {2468, -4.7293}, {2469, -4.4071}, {2470, -4.0868}, {2471, -3.7683}, {2472, -3.4516}, {2473, -3.1368}, {2474, -2.8237}, {2475, -2.5124}, {2476, -2.2028}, {2477, -1.8950}, {2478, -1.5889}, {2479, -1.2844}, {2480, -0.9816}, {2481, -0.6805}, {2482, -0.3810}, {2483, -0.0831}, {2484, 0.2131}, {2485, 0.5078}, {2486, 0.8010}, {2487, 1.0926}, {2488, 1.3826}, {2489, 1.6712}, {2490, 1.9582}, {2491, 2.2438}, {2492, 2.5279}, {2493, 2.8105}, {2494, 3.0917}, {2495, 3.3715}, {2496, 3.6498}, {2497, 3.9268}, {2498, 4.2024}, {2499, 4.4766}, {2500, 4.7495}, {2501, 5.0210}, {2502, 5.2912}, {2503, 5.5601}, {2504, 5.8277}, {2505, 6.0939}, {2506, 6.3590}, {2507, 6.6227}, {2508, 6.8852}, {2509, 7.1464}, {2510, 7.4065}, {2511, 7.6653}, {2512, 7.9229}, {2513, 8.1793}, {2514, 8.4345}, {2515, 8.6885}, {2516, 8.9414}, {2517, 9.1931}, {2518, 9.4437}, {2519, 9.6932}, {2520, 9.9415}, {2521, 10.1887}, {2522, 10.4348}, {2523, 10.6798}, {2524, 10.9238}, {2525, 11.1667}, {2526, 11.4085}, {2527, 11.6492}, {2528, 11.8889}, {2529, 12.1276}, {2530, 12.3653}, {2531, 12.6019}, {2532, 12.8375}, {2533, 13.0721}, {2534, 13.3058}, {2535, 13.5384}, {2536, 13.7701}, {2537, 14.0008}, {2538, 14.2305}, {2539, 14.4593}, {2540, 14.6871}, {2541, 14.9140}, {2542, 15.1400}, {2543, 15.3651}, {2544, 15.5892}, {2545, 15.8125}, {2546, 16.0348}, {2547, 16.2563}, {2548, 16.4768}, {2549, 16.6965}, {2550, 16.9153}, {2551, 17.1333}, {2552, 17.3504}, {2553, 17.5666}, {2554, 17.7820}, {2555, 17.9966}, {2556, 18.2104}, {2557, 18.4233}, {2558, 18.6354}, {2559, 18.8466}, {2560, 19.0571}, {2561, 19.2668}, {2562, 19.4757}, {2563, 19.6838}, {2564, 19.8911}, {2565, 20.0977}, {2566, 20.3034}, {2567, 20.5085}, {2568, 20.7127}, {2569, 20.9162}, {2570, 21.1190}, {2571, 21.3210}, {2572, 21.5223}, {2573, 21.7228}, {2574, 21.9226}, {2575, 22.1217}, {2576, 22.3201}, {2577, 22.5178}, {2578, 22.7148}, {2579, 22.9110}, {2580, 23.1066}, {2581, 23.3015}, {2582, 23.4957}, {2583, 23.6892}, {2584, 23.8821}, {2585, 24.0742}, {2586, 24.2657}, {2587, 24.4566}, {2588, 24.6468}, {2589, 24.8363}, {2590, 25.0252}, {2591, 25.2135}, {2592, 25.4011}, {2593, 25.5880}, {2594, 25.7744}, {2595, 25.9601}, {2596, 26.1452}, {2597, 26.3296}, {2598, 26.5135}, {2599, 26.6968}, {2600, 26.8794}};
        float error_fl;
        float error_fr;

        int prev_wall_cnt = 0;
        int8_t dir_diff = 0;
        IndexVec robot_position = {0, 0};
        Direction robot_dir = NORTH;

        const int back_time = 700;       // ms
        const int correction_time = 700; // ms
        const int wait_time = 200;       // ms
        int cnt_blind_alley = 0;
        int cnt_can_back = 0;
        int cnt_time = 0;

        bool flag_ctrl = false;
        bool flag_slalom;
        bool flag_wall = false; // flag for sensors reading wall
        bool flag_wall_sl = true;
        bool flag_wall_sr = true;
        bool flag_wall_front = false;
        bool flag_safety = false;
        bool flag_maze_flash = false;
        bool flag_side_correct = false;
        bool flag_straight_wall = false;
        bool flag_straight_time = false;

        int index_log = 0;
        float log_x[BUFFER_SIZE];
        float log_y[BUFFER_SIZE];
        float log_theta[BUFFER_SIZE];
        float log_omega[BUFFER_SIZE];
        float log_v[BUFFER_SIZE];
        float log_a[BUFFER_SIZE];
        float log_ref_x[BUFFER_SIZE];
        float log_ref_y[BUFFER_SIZE];
        float log_ref_theta[BUFFER_SIZE];
        float log_ref_omega[BUFFER_SIZE];
        float log_ref_v[BUFFER_SIZE];
        float log_ref_a[BUFFER_SIZE];
        float log_ctrl_v[BUFFER_SIZE];
        float log_ctrl_w[BUFFER_SIZE];
        float log_u_v[BUFFER_SIZE];
        float log_u_w[BUFFER_SIZE];
        float log_x_diff[10];
    };
} // namespace undercarriage

#endif //  CONTROLLER_H_