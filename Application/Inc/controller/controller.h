/**
 * @file controller.h
 * @author Teruru-52
 */

#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include "hardware/speaker.h"
#include "hardware/ir_sensor.h"
#include "controller/odometry.h"
#include "controller/pid_controller.h"
#include "controller/tracker.h"
#include "controller/identification.h"
#include "Agent.h"

#define ENABLE_LOG 0
#define WALL_TIMING 0.8
#define CNT_BACK 4

using SlalomType = trajectory::Slalom::SlalomType;
using AccType = trajectory::Acceleration::AccType;
using namespace hardware;

namespace undercarriage
{
    class Controller
    {
    public:
        Controller(undercarriage::Odometory *odom,
                   PID_Instances *pid,
                   undercarriage::TrackerBase *tracker,
                   trajectory::Slalom *slalom,
                   trajectory::Acceleration *acc,
                   hardware::IR_Param *ir_param,
                   trajectory::Velocity *velocity);

        typedef enum
        {
            forward,
            acc_curve,
            turn,
            pivot_turn_right_90,
            pivot_turn_left_90,
            pivot_turn_180,
            front_wall_correction,
            back,
            m_iden,
            step_iden,
            party_trick,
            stop,
            wait
        } CtrlMode;

        void InitializeOdometory() { odom->Initialize(); };
        void StartDMA() { motor.StartDMA(); };
        void InitializeMotor() { motor.CalcOffset(); };
        void BatteryCheck() { motor.BatteryCheck(); };
        int16_t GetPulseL() { return odom->GetPulseL(); };
        int16_t GetPulseR() { return odom->GetPulseR(); };

        void UpdateOdometory();
        // void UpdateIMU() { odom->UpdateIMU(); };
        void SetIRdata(const IR_Value &ir_value);
        void SetTrajectoryMode(int trj_mode = 1);
        // void SetBase() { theta_base = cur_pos.th; };
        bool ErrorFlag();

        void SetM_Iden();
        void SetStep_Iden();
        void SetPartyTrick();
        void PivotTurn(int angle);
        void Turn(const SlalomType &slalom_type);
        void Acceleration(const AccType &acc_type, uint8_t num_square = 1);
        void GoStraight();
        void FrontWallCorrection();
        void Back();
        void Wait_ms();

        void M_Iden();
        void Step_Iden();
        void PartyTrick();
        void SideWallCorrection();
        void PivotTurn();
        void CalcSlalomInput();
        float GetFrontWallPos(float ir_fmean);
        void Turn();
        void Acceleration();
        void GoStraight(float ref_l);
        void Back(int time);
        void Wait_ms(int time);
        void FrontWallCorrection(const IR_Value &ir_value);
        void BlindAlley();
        void StartMove();
        void Brake();
        void InputVelocity(float input_v, float input_w);

        void ResetCtrl();
        bool GetCtrlFlag() { return flag_ctrl; };
        bool GetMazeLoadFlag() { return flag_maze_load; };
        void ResetWallFlag() { flag_wall = false; };
        void ResetMazeLoadFlag() { flag_maze_load = false; };

        bool wallDataReady() { return flag_wall; };
        void updateWallData() { ir_wall_value = ir_value; };
        IR_Value GetIRWall() { return ir_wall_value; };
        Direction getWallData();
        void UpdatePos(const Direction &dir);
        void UpdateDir(const Direction &dir) { robot_dir = dir; };
        IndexVec getRobotPosition() { return robot_position; };

        void robotMove();
        void DirMove(const Direction &dir);
        void OpMove(const Operation &op);
        void CalcOpMovedState(const OperationList &runSequence);

        void Logger();
        void OutputLog();
        void OutputSlalomLog();
        void OutputPivotTurnLog();
        void OutputTranslationLog();
        void OutputMIdenLog() { iden_m.OutputLog(); };
        void OutputStepIdenLog() { iden_step.OutputLog(); };
        void MotorTest(float v_left, float v_right);

    private:
        undercarriage::Odometory *odom;
        hardware::Motor motor;
        PID_Instances *pid;
        undercarriage::TrackerBase *tracker;
        trajectory::Slalom *slalom;
        trajectory::Acceleration *acc;
        trajectory::PivotTurn180 pivot_turn180;
        trajectory::PivotTurn90 pivot_turn90;
        CtrlMode mode_ctrl;
        hardware::IR_Param *ir_param;
        trajectory::Velocity *velocity;
        undercarriage::M_Identification iden_m;
        undercarriage::Step_Identification iden_step;

        float v_left;
        float v_right;
        float u_w;
        float u_v;

        float ref_v;
        float ref_w;
        float ref_dw;
        int ref_size;

        float theta_base = 0.0; // theta_global_ref
        float theta_global = 0.0;
        float theta_error = 0.0;
        int angle_turn;
        float ref_theta = 0;
        float length;
        SlalomType slalom_type;
        ctrl::Pose cur_pos{0, 0, 0};
        ctrl::Pose cur_vel{0, 0, 0};
        ctrl::Pose ref_pos{0, 0, 0}; // absolute coordinates
        ctrl::Pose ref_vel{0, 0, 0}; // robot coordinates
        ctrl::Pose ref_vel_ctrl{0, 0, 0};
        ctrl::Pose ref_acc{0, 0, 0}; // robot coordinates
        float acc_x;
        const float acc_x_err = 50.0 * 1e+3; // error threshold

        const float Tp1_w = 31.83;
        const float Kp_w = 144.2 * 1e+3;
        const float Tp1_v = 0.032;
        // const float Kp_v = 0.784493 * 1e+3;
        const float Kp_v = 0.65 * 1e+3;

        hardware::IR_Value ir_value;
        hardware::IR_Value ir_wall_value;
        bool flag_read_side_wall = false;
        typedef std::pair<uint32_t, float> xy_pair;
        const std::vector<xy_pair> ir_table = {{2200, -48.9276}}; // dammy
        // const std::vector<xy_pair> ir_table = {{2200, -48.9276}, {2202, -46.6593}, {2204, -44.5307}, {2206, -42.5258}, {2208, -40.6309}, {2210, -38.8346}, {2212, -37.1271}, {2214, -35.5000}, {2216, -33.9461}, {2218, -32.4592}, {2220, -31.0336}, {2222, -29.6645}, {2224, -28.3477}, {2226, -27.0792}, {2228, -25.8556}, {2230, -24.6739}, {2232, -23.5314}, {2234, -22.4254}, {2236, -21.3537}, {2238, -20.3142}, {2240, -19.3052}, {2242, -18.3247}, {2244, -17.3714}, {2246, -16.4436}, {2248, -15.5402}, {2250, -14.6597}, {2252, -13.8011}, {2254, -12.9634}, {2256, -12.1455}, {2258, -11.3465}, {2260, -10.5656}, {2262, -9.8020}, {2264, -9.0548}, {2266, -8.3235}, {2268, -7.6074}, {2270, -6.9058}, {2272, -6.2181}, {2274, -5.5439}, {2276, -4.8826}, {2278, -4.2337}, {2280, -3.5968}, {2282, -2.9714}, {2284, -2.3572}, {2286, -1.7537}, {2288, -1.1605}, {2290, -0.5774}, {2292, -0.0039}, {2294, 0.5602}, {2296, 1.1152}, {2298, 1.6615}, {2300, 2.1993}, {2302, 2.7288}, {2304, 3.2503}, {2306, 3.7640}, {2308, 4.2703}, {2310, 4.7692}, {2312, 5.2610}, {2314, 5.7459}, {2316, 6.2241}, {2318, 6.6957}, {2320, 7.1610}, {2322, 7.6202}, {2324, 8.0733}, {2326, 8.5205}, {2328, 8.9620}, {2330, 9.3980}, {2332, 9.8285}, {2334, 10.2537}, {2336, 10.6737}, {2338, 11.0887}, {2340, 11.4988}, {2342, 11.9040}, {2344, 12.3046}, {2346, 12.7005}, {2348, 13.0920}, {2350, 13.4791}, {2352, 13.8619}, {2354, 14.2405}, {2356, 14.6150}, {2358, 14.9855}, {2360, 15.3520}, {2362, 15.7147}, {2364, 16.0737}, {2366, 16.4289}, {2368, 16.7805}, {2370, 17.1286}, {2372, 17.4732}, {2374, 17.8144}, {2376, 18.1523}, {2378, 18.4869}, {2380, 18.8182}, {2382, 19.1465}, {2384, 19.4716}, {2386, 19.7937}, {2388, 20.1129}, {2390, 20.4291}, {2392, 20.7424}, {2394, 21.0529}, {2396, 21.3607}, {2398, 21.6657}, {2400, 21.9681}, {2402, 22.2679}, {2404, 22.5650}, {2406, 22.8597}, {2408, 23.1518}, {2410, 23.4415}, {2412, 23.7288}, {2414, 24.0137}, {2416, 24.2963}, {2418, 24.5766}, {2420, 24.8546}, {2422, 25.1304}, {2424, 25.4040}, {2426, 25.6755}, {2428, 25.9449}, {2430, 26.2122}, {2432, 26.4774}, {2434, 26.7406}, {2436, 27.0018}, {2438, 27.2610}, {2440, 27.5184}, {2442, 27.7738}, {2444, 28.0273}, {2446, 28.2790}, {2448, 28.5289}, {2450, 28.7770}, {2452, 29.0233}, {2454, 29.2678}, {2456, 29.5107}, {2458, 29.7518}, {2460, 29.9913}, {2462, 30.2291}, {2464, 30.4653}, {2466, 30.6999}, {2468, 30.9330}, {2470, 31.1644}, {2472, 31.3943}, {2474, 31.6227}, {2476, 31.8496}, {2478, 32.0750}, {2480, 32.2990}, {2482, 32.5215}, {2484, 32.7426}, {2486, 32.9622}, {2488, 33.1805}, {2490, 33.3975}, {2492, 33.6130}, {2494, 33.8273}, {2496, 34.0402}, {2498, 34.2518}, {2500, 34.4621}, {2502, 34.6711}, {2504, 34.8789}, {2506, 35.0854}, {2508, 35.2908}, {2510, 35.4949}, {2512, 35.6978}, {2514, 35.8995}, {2516, 36.1000}, {2518, 36.2994}, {2520, 36.4977}, {2522, 36.6948}, {2524, 36.8908}, {2526, 37.0857}, {2528, 37.2795}, {2530, 37.4722}, {2532, 37.6638}, {2534, 37.8544}, {2536, 38.0439}, {2538, 38.2324}, {2540, 38.4199}, {2542, 38.6064}, {2544, 38.7919}, {2546, 38.9763}, {2548, 39.1598}, {2550, 39.3424}, {2552, 39.5239}, {2554, 39.7046}, {2556, 39.8842}, {2558, 40.0630}, {2560, 40.2408}, {2562, 40.4178}, {2564, 40.5938}, {2566, 40.7689}, {2568, 40.9431}, {2570, 41.1165}, {2572, 41.2890}, {2574, 41.4607}, {2576, 41.6314}, {2578, 41.8014}, {2580, 41.9705}, {2582, 42.1388}, {2584, 42.3063}, {2586, 42.4730}, {2588, 42.6389}, {2590, 42.8039}, {2592, 42.9682}, {2594, 43.1318}, {2596, 43.2945}, {2598, 43.4565}, {2600, 43.6177}};
        // const std::vector<xy_pair> ir_table = {{2200, -48.9276}, {2201, -47.7748}, {2202, -46.6593}, {2203, -45.5786}, {2204, -44.5307}, {2205, -43.5137}, {2206, -42.5258}, {2207, -41.5654}, {2208, -40.6309}, {2209, -39.7211}, {2210, -38.8346}, {2211, -37.9703}, {2212, -37.1271}, {2213, -36.3039}, {2214, -35.5000}, {2215, -34.7143}, {2216, -33.9461}, {2217, -33.1947}, {2218, -32.4592}, {2219, -31.7390}, {2220, -31.0336}, {2221, -30.3423}, {2222, -29.6645}, {2223, -28.9998}, {2224, -28.3477}, {2225, -27.7076}, {2226, -27.0792}, {2227, -26.4620}, {2228, -25.8556}, {2229, -25.2597}, {2230, -24.6739}, {2231, -24.0979}, {2232, -23.5314}, {2233, -22.9739}, {2234, -22.4254}, {2235, -21.8854}, {2236, -21.3537}, {2237, -20.8300}, {2238, -20.3142}, {2239, -19.8060}, {2240, -19.3052}, {2241, -18.8115}, {2242, -18.3247}, {2243, -17.8448}, {2244, -17.3714}, {2245, -16.9044}, {2246, -16.4436}, {2247, -15.9889}, {2248, -15.5402}, {2249, -15.0971}, {2250, -14.6597}, {2251, -14.2278}, {2252, -13.8011}, {2253, -13.3797}, {2254, -12.9634}, {2255, -12.5520}, {2256, -12.1455}, {2257, -11.7437}, {2258, -11.3465}, {2259, -10.9539}, {2260, -10.5656}, {2261, -10.1817}, {2262, -9.8020}, {2263, -9.4264}, {2264, -9.0548}, {2265, -8.6872}, {2266, -8.3235}, {2267, -7.9636}, {2268, -7.6074}, {2269, -7.2548}, {2270, -6.9058}, {2271, -6.5602}, {2272, -6.2181}, {2273, -5.8794}, {2274, -5.5439}, {2275, -5.2117}, {2276, -4.8826}, {2277, -4.5567}, {2278, -4.2337}, {2279, -3.9138}, {2280, -3.5968}, {2281, -3.2827}, {2282, -2.9714}, {2283, -2.6630}, {2284, -2.3572}, {2285, -2.0541}, {2286, -1.7537}, {2287, -1.4558}, {2288, -1.1605}, {2289, -0.8677}, {2290, -0.5774}, {2291, -0.2894}, {2292, -0.0039}, {2293, 0.2793}, {2294, 0.5602}, {2295, 0.8388}, {2296, 1.1152}, {2297, 1.3895}, {2298, 1.6615}, {2299, 1.9314}, {2300, 2.1993}, {2301, 2.4650}, {2302, 2.7288}, {2303, 2.9905}, {2304, 3.2503}, {2305, 3.5081}, {2306, 3.7640}, {2307, 4.0181}, {2308, 4.2703}, {2309, 4.5206}, {2310, 4.7692}, {2311, 5.0159}, {2312, 5.2610}, {2313, 5.5043}, {2314, 5.7459}, {2315, 5.9858}, {2316, 6.2241}, {2317, 6.4607}, {2318, 6.6957}, {2319, 6.9292}, {2320, 7.1610}, {2321, 7.3914}, {2322, 7.6202}, {2323, 7.8475}, {2324, 8.0733}, {2325, 8.2976}, {2326, 8.5205}, {2327, 8.7420}, {2328, 8.9620}, {2329, 9.1807}, {2330, 9.3980}, {2331, 9.6139}, {2332, 9.8285}, {2333, 10.0417}, {2334, 10.2537}, {2335, 10.4643}, {2336, 10.6737}, {2337, 10.8818}, {2338, 11.0887}, {2339, 11.2943}, {2340, 11.4988}, {2341, 11.7020}, {2342, 11.9040}, {2343, 12.1049}, {2344, 12.3046}, {2345, 12.5031}, {2346, 12.7005}, {2347, 12.8968}, {2348, 13.0920}, {2349, 13.2861}, {2350, 13.4791}, {2351, 13.6710}, {2352, 13.8619}, {2353, 14.0517}, {2354, 14.2405}, {2355, 14.4283}, {2356, 14.6150}, {2357, 14.8007}, {2358, 14.9855}, {2359, 15.1692}, {2360, 15.3520}, {2361, 15.5339}, {2362, 15.7147}, {2363, 15.8947}, {2364, 16.0737}, {2365, 16.2517}, {2366, 16.4289}, {2367, 16.6052}, {2368, 16.7805}, {2369, 16.9550}, {2370, 17.1286}, {2371, 17.3013}, {2372, 17.4732}, {2373, 17.6442}, {2374, 17.8144}, {2375, 17.9838}, {2376, 18.1523}, {2377, 18.3200}, {2378, 18.4869}, {2379, 18.6530}, {2380, 18.8182}, {2381, 18.9828}, {2382, 19.1465}, {2383, 19.3094}, {2384, 19.4716}, {2385, 19.6330}, {2386, 19.7937}, {2387, 19.9537}, {2388, 20.1129}, {2389, 20.2713}, {2390, 20.4291}, {2391, 20.5861}, {2392, 20.7424}, {2393, 20.8980}, {2394, 21.0529}, {2395, 21.2072}, {2396, 21.3607}, {2397, 21.5136}, {2398, 21.6657}, {2399, 21.8173}, {2400, 21.9681}, {2401, 22.1183}, {2402, 22.2679}, {2403, 22.4168}, {2404, 22.5650}, {2405, 22.7127}, {2406, 22.8597}, {2407, 23.0060}, {2408, 23.1518}, {2409, 23.2970}, {2410, 23.4415}, {2411, 23.5854}, {2412, 23.7288}, {2413, 23.8715}, {2414, 24.0137}, {2415, 24.1553}, {2416, 24.2963}, {2417, 24.4367}, {2418, 24.5766}, {2419, 24.7159}, {2420, 24.8546}, {2421, 24.9928}, {2422, 25.1304}, {2423, 25.2675}, {2424, 25.4040}, {2425, 25.5400}, {2426, 25.6755}, {2427, 25.8105}, {2428, 25.9449}, {2429, 26.0788}, {2430, 26.2122}, {2431, 26.3450}, {2432, 26.4774}, {2433, 26.6092}, {2434, 26.7406}, {2435, 26.8714}, {2436, 27.0018}, {2437, 27.1317}, {2438, 27.2610}, {2439, 27.3899}, {2440, 27.5184}, {2441, 27.6463}, {2442, 27.7738}, {2443, 27.9008}, {2444, 28.0273}, {2445, 28.1534}, {2446, 28.2790}, {2447, 28.4042}, {2448, 28.5289}, {2449, 28.6531}, {2450, 28.7770}};
        // const std::vector<xy_pair> ir_table = {{2200, -48.9276}, {2201, -47.7748}, {2202, -46.6593}, {2203, -45.5786}, {2204, -44.5307}, {2205, -43.5137}, {2206, -42.5258}, {2207, -41.5654}, {2208, -40.6309}, {2209, -39.7211}, {2210, -38.8346}, {2211, -37.9703}, {2212, -37.1271}, {2213, -36.3039}, {2214, -35.5000}, {2215, -34.7143}, {2216, -33.9461}, {2217, -33.1947}, {2218, -32.4592}, {2219, -31.7390}, {2220, -31.0336}, {2221, -30.3423}, {2222, -29.6645}, {2223, -28.9998}, {2224, -28.3477}, {2225, -27.7076}, {2226, -27.0792}, {2227, -26.4620}, {2228, -25.8556}, {2229, -25.2597}, {2230, -24.6739}, {2231, -24.0979}, {2232, -23.5314}, {2233, -22.9739}, {2234, -22.4254}, {2235, -21.8854}, {2236, -21.3537}, {2237, -20.8300}, {2238, -20.3142}, {2239, -19.8060}, {2240, -19.3052}, {2241, -18.8115}, {2242, -18.3247}, {2243, -17.8448}, {2244, -17.3714}, {2245, -16.9044}, {2246, -16.4436}, {2247, -15.9889}, {2248, -15.5402}, {2249, -15.0971}, {2250, -14.6597}, {2251, -14.2278}, {2252, -13.8011}, {2253, -13.3797}, {2254, -12.9634}, {2255, -12.5520}, {2256, -12.1455}, {2257, -11.7437}, {2258, -11.3465}, {2259, -10.9539}, {2260, -10.5656}, {2261, -10.1817}, {2262, -9.8020}, {2263, -9.4264}, {2264, -9.0548}, {2265, -8.6872}, {2266, -8.3235}, {2267, -7.9636}, {2268, -7.6074}, {2269, -7.2548}, {2270, -6.9058}, {2271, -6.5602}, {2272, -6.2181}, {2273, -5.8794}, {2274, -5.5439}, {2275, -5.2117}, {2276, -4.8826}, {2277, -4.5567}, {2278, -4.2337}, {2279, -3.9138}, {2280, -3.5968}, {2281, -3.2827}, {2282, -2.9714}, {2283, -2.6630}, {2284, -2.3572}, {2285, -2.0541}, {2286, -1.7537}, {2287, -1.4558}, {2288, -1.1605}, {2289, -0.8677}, {2290, -0.5774}, {2291, -0.2894}, {2292, -0.0039}, {2293, 0.2793}, {2294, 0.5602}, {2295, 0.8388}, {2296, 1.1152}, {2297, 1.3895}, {2298, 1.6615}, {2299, 1.9314}, {2300, 2.1993}, {2301, 2.4650}, {2302, 2.7288}, {2303, 2.9905}, {2304, 3.2503}, {2305, 3.5081}, {2306, 3.7640}, {2307, 4.0181}, {2308, 4.2703}, {2309, 4.5206}, {2310, 4.7692}, {2311, 5.0159}, {2312, 5.2610}, {2313, 5.5043}, {2314, 5.7459}, {2315, 5.9858}, {2316, 6.2241}, {2317, 6.4607}, {2318, 6.6957}, {2319, 6.9292}, {2320, 7.1610}, {2321, 7.3914}, {2322, 7.6202}, {2323, 7.8475}, {2324, 8.0733}, {2325, 8.2976}, {2326, 8.5205}, {2327, 8.7420}, {2328, 8.9620}, {2329, 9.1807}, {2330, 9.3980}, {2331, 9.6139}, {2332, 9.8285}, {2333, 10.0417}, {2334, 10.2537}, {2335, 10.4643}, {2336, 10.6737}, {2337, 10.8818}, {2338, 11.0887}, {2339, 11.2943}, {2340, 11.4988}, {2341, 11.7020}, {2342, 11.9040}, {2343, 12.1049}, {2344, 12.3046}, {2345, 12.5031}, {2346, 12.7005}, {2347, 12.8968}, {2348, 13.0920}, {2349, 13.2861}, {2350, 13.4791}, {2351, 13.6710}, {2352, 13.8619}, {2353, 14.0517}, {2354, 14.2405}, {2355, 14.4283}, {2356, 14.6150}, {2357, 14.8007}, {2358, 14.9855}, {2359, 15.1692}, {2360, 15.3520}, {2361, 15.5339}, {2362, 15.7147}, {2363, 15.8947}, {2364, 16.0737}, {2365, 16.2517}, {2366, 16.4289}, {2367, 16.6052}, {2368, 16.7805}, {2369, 16.9550}, {2370, 17.1286}, {2371, 17.3013}, {2372, 17.4732}, {2373, 17.6442}, {2374, 17.8144}, {2375, 17.9838}, {2376, 18.1523}, {2377, 18.3200}, {2378, 18.4869}, {2379, 18.6530}, {2380, 18.8182}, {2381, 18.9828}, {2382, 19.1465}, {2383, 19.3094}, {2384, 19.4716}, {2385, 19.6330}, {2386, 19.7937}, {2387, 19.9537}, {2388, 20.1129}, {2389, 20.2713}, {2390, 20.4291}, {2391, 20.5861}, {2392, 20.7424}, {2393, 20.8980}, {2394, 21.0529}, {2395, 21.2072}, {2396, 21.3607}, {2397, 21.5136}, {2398, 21.6657}, {2399, 21.8173}, {2400, 21.9681}, {2401, 22.1183}, {2402, 22.2679}, {2403, 22.4168}, {2404, 22.5650}, {2405, 22.7127}, {2406, 22.8597}, {2407, 23.0060}, {2408, 23.1518}, {2409, 23.2970}, {2410, 23.4415}, {2411, 23.5854}, {2412, 23.7288}, {2413, 23.8715}, {2414, 24.0137}, {2415, 24.1553}, {2416, 24.2963}, {2417, 24.4367}, {2418, 24.5766}, {2419, 24.7159}, {2420, 24.8546}, {2421, 24.9928}, {2422, 25.1304}, {2423, 25.2675}, {2424, 25.4040}, {2425, 25.5400}, {2426, 25.6755}, {2427, 25.8105}, {2428, 25.9449}, {2429, 26.0788}, {2430, 26.2122}, {2431, 26.3450}, {2432, 26.4774}, {2433, 26.6092}, {2434, 26.7406}, {2435, 26.8714}, {2436, 27.0018}, {2437, 27.1317}, {2438, 27.2610}, {2439, 27.3899}, {2440, 27.5184}, {2441, 27.6463}, {2442, 27.7738}, {2443, 27.9008}, {2444, 28.0273}, {2445, 28.1534}, {2446, 28.2790}, {2447, 28.4042}, {2448, 28.5289}, {2449, 28.6531}, {2450, 28.7770}, {2451, 28.9003}, {2452, 29.0233}, {2453, 29.1458}, {2454, 29.2678}, {2455, 29.3895}, {2456, 29.5107}, {2457, 29.6315}, {2458, 29.7518}, {2459, 29.8718}, {2460, 29.9913}, {2461, 30.1104}, {2462, 30.2291}, {2463, 30.3474}, {2464, 30.4653}, {2465, 30.5828}, {2466, 30.6999}, {2467, 30.8166}, {2468, 30.9330}, {2469, 31.0489}, {2470, 31.1644}, {2471, 31.2796}, {2472, 31.3943}, {2473, 31.5087}, {2474, 31.6227}, {2475, 31.7364}, {2476, 31.8496}, {2477, 31.9625}, {2478, 32.0750}, {2479, 32.1872}, {2480, 32.2990}, {2481, 32.4104}, {2482, 32.5215}, {2483, 32.6322}, {2484, 32.7426}, {2485, 32.8526}, {2486, 32.9622}, {2487, 33.0716}, {2488, 33.1805}, {2489, 33.2892}, {2490, 33.3975}, {2491, 33.5054}, {2492, 33.6130}, {2493, 33.7203}, {2494, 33.8273}, {2495, 33.9339}, {2496, 34.0402}, {2497, 34.1461}, {2498, 34.2518}, {2499, 34.3571}, {2500, 34.4621}};
        float error_fl;
        float error_fr;

        int prev_wall_cnt = 0;
        int8_t dir_diff = 0;
        IndexVec robot_position = {0, 0};
        Direction robot_dir = NORTH;

        const int back_time = 700;       // ms
        const int correction_time = 700; // ms
        const int wait_time = 200;       // ms
        int cnt_blind_alley = 0;
        int cnt_can_back = 0;
        int cnt_time = 0;

        bool flag_ctrl = false;
        bool flag_slalom;
        bool flag_wall = false; // flag for sensors reading wall
        bool flag_wall_sl = true;
        bool flag_wall_sr = true;
        bool flag_wall_front = false;
        bool flag_safety = false;
        bool flag_maze_load = false;
        bool flag_side_correct = false;
        bool flag_straight_wall = false;
        bool flag_straight_time = false;

        int index_log = 0;
        float *log_x;
        float *log_y;
        // float *log_l;
        float *log_theta;
        float *log_omega;
        float *log_v;
        float *log_a;
        float *log_ref_x;
        float *log_ref_y;
        float *log_ref_theta;
        float *log_ref_omega;
        float *log_ref_v;
        float *log_ref_a;
        float *log_ctrl_v;
        float *log_ctrl_w;
        float *log_u_v;
        float *log_u_w;
    };
} // namespace undercarriage

#endif //  CONTROLLER_H_